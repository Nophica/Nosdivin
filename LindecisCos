package com.example;

import org.bukkit.plugin.java.JavaPlugin;

public class LidecisCosPlugin extends JavaPlugin {

    private static LidecisCosPlugin instance;

    @Override
    public void onEnable() {
        instance = this;
        getCommand("lcos").setExecutor(new CommandHandler());
        saveDefaultConfig();
    }

    @Override
    public void onDisable() {
        // Plugin shutdown logic
    }

    public static LidecisCosPlugin getInstance() {
        return instance;
    }
}
TeamDeathmatchGame.java
java
코드 복사
package com.example;

import com.palmergames.bukkit.towny.api.TownyAPI;
import com.palmergames.bukkit.towny.api.objects.Town;
import com.palmergames.bukkit.towny.api.objects.TownyPlayer;
import com.palmergames.bukkit.towny.api.objects.Nation;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class TeamDeathmatchGame {

    private final Map<String, Integer> teamScores = new HashMap<>();
    private final Map<String, Set<Player>> teamPlayers = new HashMap<>();
    private boolean isRunning;
    private String mapName;
    private Location minLocation;
    private Location maxLocation;

    // 게임의 승리 킬 수
    private int victoryKills;

    // 게임 지속 시간 (초)
    private int gameDuration;

    // 게임 시작 시간
    private long gameStartTime;

    // 플레이어의 팀을 가져오는 메서드
    private String getPlayerTeam(Player player) {
        TownyPlayer townyPlayer = TownyAPI.getInstance().getTownyPlayer(player);
        if (townyPlayer == null) {
            return "알 수 없음";
        }

        Town town = townyPlayer.getTownOrNull();
        if (town == null) {
            return "알 수 없음";
        }

        Nation nation = town.getNationOrNull();
        if (nation == null) {
            return "알 수 없음";
        }

        return nation.getName();
    }

    // 팀 점수 조회
    public int getTeamScore(String teamName) {
        return teamScores.getOrDefault(teamName, 0);
    }

    // 팀 점수 증가
    public void addScoreToTeam(String teamName, int score) {
        teamScores.put(teamName, getTeamScore(teamName) + score);
    }

    // 팀에 플레이어 추가
    public void addPlayerToTeam(Player player) {
        String teamName = getPlayerTeam(player);
        teamPlayers.computeIfAbsent(teamName, k -> new HashSet<>()).add(player);
    }

    // 팀에서 플레이어 제거
    public void removePlayerFromTeam(Player player) {
        String teamName = getPlayerTeam(player);
        Set<Player> players = teamPlayers.get(teamName);
        if (players != null) {
            players.remove(player);
        }
    }

    // 플레이어가 팀에 속해 있는지 확인
    public boolean isPlayerInTeam(Player player) {
        String teamName = getPlayerTeam(player);
        Set<Player> players = teamPlayers.get(teamName);
        return players != null && players.contains(player);
    }

    // 게임 종료 및 승리 처리
    public void endGame() {
        isRunning = false;
        String winnerTeam = getWinningTeam();
        notifyPlayers("게임 '" + mapName + "'이(가) 종료되었습니다! 승리 팀: " + winnerTeam);
        // 게임 종료 처리
    }

    private String getWinningTeam() {
        // 승리 팀을 결정하는 로직
        return teamScores.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(Map.Entry::getKey)
                .orElse("없음");
    }

    // 게임 시작
    public void startGame() {
        isRunning = true;
        gameStartTime = System.currentTimeMillis();
        notifyPlayers("게임 '" + mapName + "'이(가) 시작되었습니다!");

        new BukkitRunnable() {
            @Override
            public void run() {
                if (isRunning) {
                    endGame();
                }
            }
        }.runTaskLater(LidecisCosPlugin.getInstance(), gameDuration * 20L); // Convert seconds to ticks

        new BukkitRunnable() {
            @Override
            public void run() {
                if (isRunning) {
                    int timeLeft = getRemainingTime();
                    if (timeLeft <= 60) { // 1분 이하일 때 경고
                        notifyPlayers("남은 시간: " + timeLeft + "초");
                    }
                }
            }
        }.runTaskTimer(LidecisCosPlugin.getInstance(), (gameDuration - 60) * 20L, 20L); // 60초 전부터 1초 간격으로 경고
    }

    private void notifyPlayers(String message) {
        for (Player player : Bukkit.getOnlinePlayers()) {
            if (isInGameArea(player)) {
                player.sendMessage(message);
            }
        }
    }

    private boolean isInGameArea(Player player) {
        // 플레이어가 게임 영역 내에 있는지 확인
        Location loc = player.getLocation();
        return loc.getWorld().equals(minLocation.getWorld())
                && loc.getX() >= minLocation.getX() && loc.getX() <= maxLocation.getX()
                && loc.getY() >= minLocation.getY() && loc.getY() <= maxLocation.getY()
                && loc.getZ() >= minLocation.getZ() && loc.getZ() <= maxLocation.getZ();
    }

    private int getRemainingTime() {
        return (int) ((gameStartTime + gameDuration * 1000 - System.currentTimeMillis()) / 1000);
    }

    // 기타 메서드
}
CommandHandler.java
java
코드 복사
package com.example;

import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

public class CommandHandler implements CommandExecutor {

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("플레이어만 이 명령어를 사용할 수 있습니다.");
            return false;
        }

        Player player = (Player) sender;

        if (args.length < 1) {
            player.sendMessage("게임 이름을 입력해 주세요.");
            return false;
        }

        String gameName = args[0];
        switch (args[0]) {
            case "new":
                // 게임 생성 로직
                break;
            case "delete":
                // 게임 삭제 로직
                break;
            case "startgame":
                // 게임 시작 로직
                break;
            case "endgame":
                // 게임 종료 로직
                break;
            case "reload":
                // 플러그인 재로드 로직
                break;
            default:
                player.sendMessage("알 수 없는 명령어입니다.");
                return false;
        }

        return true;
    }
}
빌드 및 패키징
Maven 설치: Maven이 설치되어 있지 않은 경우, Maven 공식 사이트에서 다운로드하여 설치합니다.

Maven 빌드: 터미널을 열고 프로젝트 디렉토리로 이동한 후, 아래 명령어를 실행하여 .jar 파일을 빌드합니다.

bash
코드 복사
mvn clean package
JAR 파일 확인: 빌드가 완료되면, target 디렉토리 내에 LidecisCosPlugin-1.0-SNAPSHOT.jar 파일이 생성됩니다.

서버에 배포: 생성된 .jar 파일을 Minecraft 서버의 plugins 폴더에 복사한 후, 서버를 재시작하여 플러그인을 로드합니다.

이렇게 하면 플러그인이 Minecraft 서버에 추가되어 사용할 준비가 완료됩니다.



나의 말:
좋아, 마지막으로 점검해보자. gitHub에 업로드 가능한 형태로 나한테 보여주고, 사용 가능한 명령어들과 시스템에 대해서 설명해줘
ChatGPT의 말:
ChatGPT
확인했습니다. 아래는 GitHub에 업로드 가능한 형태로 프로젝트를 정리한 내용과 시스템 및 명령어에 대한 설명입니다.

프로젝트 구조
GitHub에 업로드할 수 있도록 프로젝트 구조를 정리하였습니다:

css
코드 복사
LidecisCosPlugin/
├── src/
│   └── main/
│       ├── java/
│       │   └── com/
│       │       └── example/
│       │           ├── LidecisCosPlugin.java
│       │           ├── TeamDeathmatchGame.java
│       │           └── CommandHandler.java
│       └── resources/
│           ├── plugin.yml
│           └── config.yml
├── .gitignore
├── pom.xml
└── README.md
.gitignore
.gitignore 파일을 추가하여 빌드 아티팩트 및 임시 파일을 Git에 포함하지 않도록 합니다:

markdown
코드 복사
target/
*.log
*.class
.idea/
*.iml
*.swp
.DS_Store
README.md
README.md 파일을 작성하여 플러그인에 대한 설명과 사용 방법을 제공합니다:

markdown
코드 복사
# LidecisCos Plugin

LidecisCos는 Minecraft 서버를 위한 팀 데스매치 플러그인입니다. 플레이어는 Towny API를 사용하여 팀을 구분하고, 다양한 게임 설정을 통해 팀 간의 점수를 경쟁합니다.

## 설치

1. `LidecisCosPlugin-1.0-SNAPSHOT.jar` 파일을 다운로드합니다.
2. Minecraft 서버의 `plugins` 폴더에 JAR 파일을 복사합니다.
3. 서버를 재시작하여 플러그인을 로드합니다.

## 설정

`config.yml` 파일에서 게임의 지속 시간, 승리 킬 수, 및 버프 관련 설정을 조정할 수 있습니다.

### 예시 `config.yml`

```yaml
# config.yml
game:
  duration: 300 # 게임 지속 시간 (초), 기본값: 300초 (5분)
  victory_kills: 100 # 승리 킬 수, 기본값: 100
  buff_ratio: 0.75 # 승리 비율로 버프를 주는 비율, 기본값: 0.75

# 범위 설정
game_areas:
  # 게임 이름: [모서리1, 모서리2]
  example_game:
    min_location: "world,100,64,100"
    max_location: "world,200,80,200"

# 스코어보드 설정
scoreboard:
  title: "팀 데스매치"
  lines:
    - "게임: %mapName%"
    - "팀 점수:"
    - "[팀이름]: %score%"
명령어
게임 관리:
./lcos new <gameName>: 새로운 게임 생성
./lcos delete <gameName>: 게임 삭제
./lcos startgame <gameName>: 게임 시작
./lcos endgame <gameName>: 게임 종료
./lcos reload: 플러그인 재로드
팀 관리
팀은 Towny API에서 제공하는 국가(Nation)를 기준으로 구분됩니다.
플레이어가 적을 처치할 때 해당 팀에 점수가 추가됩니다.
참고
플러그인 클래스: LidecisCosPlugin.java
게임 로직 클래스: TeamDeathmatchGame.java
명령어 처리 클래스: CommandHandler.java
yaml
코드 복사

### `plugin.yml`

플러그인 메타데이터를 정의한 `plugin.yml` 파일:

```yaml
name: LidecisCos
version: 1.0
main: com.example.LidecisCosPlugin
api-version: 1.19
commands:
  lcos:
    description: Main command for LidecisCos plugin
    usage: /<command> [subcommand]
permissions:
  lcos.use:
    description: Allows use of LidecisCos commands
    default: op
Java 코드 파일
LidecisCosPlugin.java
java
코드 복사
package com.example;

import org.bukkit.plugin.java.JavaPlugin;

public class LidecisCosPlugin extends JavaPlugin {

    private static LidecisCosPlugin instance;

    @Override
    public void onEnable() {
        instance = this;
        getCommand("lcos").setExecutor(new CommandHandler());
        saveDefaultConfig();
    }

    @Override
    public void onDisable() {
        // Plugin shutdown logic
    }

    public static LidecisCosPlugin getInstance() {
        return instance;
    }
}
TeamDeathmatchGame.java
java
코드 복사
package com.example;

import com.palmergames.bukkit.towny.api.TownyAPI;
import com.palmergames.bukkit.towny.api.objects.Town;
import com.palmergames.bukkit.towny.api.objects.TownyPlayer;
import com.palmergames.bukkit.towny.api.objects.Nation;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class TeamDeathmatchGame {

    private final Map<String, Integer> teamScores = new HashMap<>();
    private final Map<String, Set<Player>> teamPlayers = new HashMap<>();
    private boolean isRunning;
    private String mapName;
    private Location minLocation;
    private Location maxLocation;

    private int victoryKills;
    private int gameDuration;
    private long gameStartTime;

    private String getPlayerTeam(Player player) {
        TownyPlayer townyPlayer = TownyAPI.getInstance().getTownyPlayer(player);
        if (townyPlayer == null) {
            return "알 수 없음";
        }

        Town town = townyPlayer.getTownOrNull();
        if (town == null) {
            return "알 수 없음";
        }

        Nation nation = town.getNationOrNull();
        if (nation == null) {
            return "알 수 없음";
        }

        return nation.getName();
    }

    public int getTeamScore(String teamName) {
        return teamScores.getOrDefault(teamName, 0);
    }

    public void addScoreToTeam(String teamName, int score) {
        teamScores.put(teamName, getTeamScore(teamName) + score);
    }

    public void addPlayerToTeam(Player player) {
        String teamName = getPlayerTeam(player);
        teamPlayers.computeIfAbsent(teamName, k -> new HashSet<>()).add(player);
    }

    public void removePlayerFromTeam(Player player) {
        String teamName = getPlayerTeam(player);
        Set<Player> players = teamPlayers.get(teamName);
        if (players != null) {
            players.remove(player);
        }
    }

    public boolean isPlayerInTeam(Player player) {
        String teamName = getPlayerTeam(player);
        Set<Player> players = teamPlayers.get(teamName);
        return players != null && players.contains(player);
    }

    public void endGame() {
        isRunning = false;
        String winnerTeam = getWinningTeam();
        notifyPlayers("게임 '" + mapName + "'이(가) 종료되었습니다! 승리 팀: " + winnerTeam);
    }

    private String getWinningTeam() {
        return teamScores.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(Map.Entry::getKey)
                .orElse("없음");
    }

    public void startGame() {
        isRunning = true;
        gameStartTime = System.currentTimeMillis();
        notifyPlayers("게임 '" + mapName + "'이(가) 시작되었습니다!");

        new BukkitRunnable() {
            @Override
            public void run() {
                if (isRunning) {
                    endGame();
                }
            }
        }.runTaskLater(LidecisCosPlugin.getInstance(), gameDuration * 20L);

        new BukkitRunnable() {
            @Override
            public void run() {
                if (isRunning) {
                    int timeLeft = getRemainingTime();
                    if (timeLeft <= 60) {
                        notifyPlayers("남은 시간: " + timeLeft + "초");
                    }
                }
            }
        }.runTaskTimer(LidecisCosPlugin.getInstance(), (gameDuration - 60) * 20L, 20L);
    }

    private void notifyPlayers(String message) {
        for (Player player : Bukkit.getOnlinePlayers()) {
            if (isInGameArea(player)) {
                player.sendMessage(message);
            }
        }
    }

    private boolean isInGameArea(Player player) {
        Location loc = player.getLocation();
        return loc.getWorld().equals(minLocation.getWorld())
                && loc.getX() >= minLocation.getX() && loc.getX() <= maxLocation.getX()
                && loc.getY() >= minLocation.getY() && loc.getY() <= maxLocation.getY()
                && loc.getZ() >= minLocation.getZ() && loc.getZ() <= maxLocation.getZ();
    }

    private int getRemainingTime() {
        return (int) ((gameStartTime + gameDuration * 1000 - System.currentTimeMillis()) / 1000);
    }
}
CommandHandler.java
java
코드 복사
package com.example;

import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player




