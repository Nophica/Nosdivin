package com.example;

import com.palmergames.bukkit.towny.api.TownyAPI;
import com.palmergames.bukkit.towny.api.objects.Town;
import com.palmergames.bukkit.towny.api.objects.TownyPlayer;
import com.palmergames.bukkit.towny.api.objects.Nation;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class TeamDeathmatchGame {

    private final Map<String, Integer> teamScores = new HashMap<>();
    private final Map<String, Set<Player>> teamPlayers = new HashMap<>();
    private boolean isRunning;
    private String mapName;
    private Location minLocation;
    private Location maxLocation;

    // 게임의 승리 킬 수
    private int victoryKills;

    // 게임 지속 시간 (초)
    private int gameDuration;

    // 게임 시작 시간
    private long gameStartTime;

    // 플레이어의 팀을 가져오는 메서드
    private String getPlayerTeam(Player player) {
        TownyPlayer townyPlayer = TownyAPI.getInstance().getTownyPlayer(player);
        if (townyPlayer == null) {
            return "알 수 없음";
        }

        Town town = townyPlayer.getTownOrNull();
        if (town == null) {
            return "알 수 없음";
        }

        Nation nation = town.getNationOrNull();
        if (nation == null) {
            return "알 수 없음";
        }

        return nation.getName();
    }

    // 팀 점수 조회
    public int getTeamScore(String teamName) {
        return teamScores.getOrDefault(teamName, 0);
    }

    // 팀 점수 증가
    public void addScoreToTeam(String teamName, int score) {
        teamScores.put(teamName, getTeamScore(teamName) + score);
    }

    // 팀에 플레이어 추가
    public void addPlayerToTeam(Player player) {
        String teamName = getPlayerTeam(player);
        teamPlayers.computeIfAbsent(teamName, k -> new HashSet<>()).add(player);
    }

    // 팀에서 플레이어 제거
    public void removePlayerFromTeam(Player player) {
        String teamName = getPlayerTeam(player);
        Set<Player> players = teamPlayers.get(teamName);
        if (players != null) {
            players.remove(player);
        }
    }

    // 플레이어가 팀에 속해 있는지 확인
    public boolean isPlayerInTeam(Player player) {
        String teamName = getPlayerTeam(player);
        Set<Player> players = teamPlayers.get(teamName);
        return players != null && players.contains(player);
    }

    // 게임 종료 및 승리 처리
    public void endGame() {
        isRunning = false;
        String winnerTeam = getWinningTeam();
        notifyPlayers("게임 '" + mapName + "'이(가) 종료되었습니다! 승리 팀: " + winnerTeam);
        // 게임 종료 처리
    }

    private String getWinningTeam() {
        // 승리 팀을 결정하는 로직
        return teamScores.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(Map.Entry::getKey)
                .orElse("없음");
    }

    // 게임 시작
    public void startGame() {
        isRunning = true;
        gameStartTime = System.currentTimeMillis();
        notifyPlayers("게임 '" + mapName + "'이(가) 시작되었습니다!");

        new BukkitRunnable() {
            @Override
            public void run() {
                if (isRunning) {
                    endGame();
                }
            }
        }.runTaskLater(LidecisCosPlugin.getInstance(), gameDuration * 20L); // Convert seconds to ticks

        new BukkitRunnable() {
            @Override
            public void run() {
                if (isRunning) {
                    int timeLeft = getRemainingTime();
                    if (timeLeft <= 60) { // 1분 이하일 때 경고
                        notifyPlayers("남은 시간: " + timeLeft + "초");
                    }
                }
            }
        }.runTaskTimer(LidecisCosPlugin.getInstance(), (gameDuration - 60) * 20L, 20L); // 60초 전부터 1초 간격으로 경고
    }

    private void notifyPlayers(String message) {
        for (Player player : Bukkit.getOnlinePlayers()) {
            if (isInGameArea(player)) {
                player.sendMessage(message);
            }
        }
    }

    private boolean isInGameArea(Player player) {
        // 플레이어가 게임 영역 내에 있는지 확인
        Location loc = player.getLocation();
        return loc.getWorld().equals(minLocation.getWorld())
                && loc.getX() >= minLocation.getX() && loc.getX() <= maxLocation.getX()
                && loc.getY() >= minLocation.getY() && loc.getY() <= maxLocation.getY()
                && loc.getZ() >= minLocation.getZ() && loc.getZ() <= maxLocation.getZ();
    }

    private int getRemainingTime() {
        return (int) ((gameStartTime + gameDuration * 1000 - System.currentTimeMillis()) / 1000);
    }

    // 기타 메서드
}
